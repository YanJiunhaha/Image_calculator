using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Imaging;

namespace image2
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        private Bitmap GetGray(Bitmap im)
        {
            Rectangle r1 = new Rectangle(0, 0, im.Width, im.Height);
            BitmapData d1 = im.LockBits(r1, ImageLockMode.ReadOnly, im.PixelFormat);
            IntPtr ptr1 = d1.Scan0;
            byte[] rgb1 = new byte[d1.Stride * im.Height];
            int skip1 = d1.Stride - im.Width;
            System.Runtime.InteropServices.Marshal.Copy(ptr1, rgb1, 0, rgb1.Length);

            Bitmap g = new Bitmap(im.Width, im.Height, PixelFormat.Format8bppIndexed);
            Rectangle r2 = new Rectangle(0, 0, g.Width, g.Height);
            BitmapData d2 = g.LockBits(r2, ImageLockMode.ReadWrite, g.PixelFormat);
            IntPtr ptr2 = d2.Scan0;
            byte[] rgb2 = new byte[d2.Stride * g.Height];
            int skip2 = d2.Stride - g.Width;

            for (int y = 0, counter1 = 0, counter2 = 0; y < g.Height; ++y, counter1 += skip1, counter2 += skip2)
            {
                for(int x = 0; x < g.Width; ++x, counter1 += 3, counter1 += 1)
                {
                    rgb2[counter2] = Convert.ToByte(0.299*rgb1[counter1+2]+0.587*rgb1[counter1+1]+0.114*rgb1[counter1]);

                }
            }
            System.Runtime.InteropServices.Marshal.Copy(rgb2, 0, ptr2, rgb2.Length);

            ColorPalette myPalette = g.Palette;
            for (int i = 0; i < 256; ++i) myPalette.Entries[i] = Color.FromArgb(i, i, i);
            g.Palette = myPalette;
            im.UnlockBits(d1);
            g.UnlockBits(d2);
            return g;
        }
        Bitmap image1;
        private void button1_Click(object sender, EventArgs e)
        {
            Stream myStream = null;

            OpenFileDialog openFileDialog1 = new OpenFileDialog();



            //openFileDialog1.InitialDirectory = "";

            openFileDialog1.Filter = "所有檔案(*.*)|*.*";

            openFileDialog1.FilterIndex = 1;

            openFileDialog1.RestoreDirectory = true;



            if (openFileDialog1.ShowDialog() == DialogResult.OK)

            {

                try

                {

                    if ((myStream = openFileDialog1.OpenFile()) != null)

                    {

                        using (myStream)

                        {

                            image1 = (Bitmap)Bitmap.FromStream(myStream);

                            if (image1.PixelFormat == PixelFormat.Format24bppRgb)

                                image1 = GetGray(image1);

                            pictureBox1.Image = image1;

                        }

                    }

                }

                catch (Exception ex)

                {

                    MessageBox.Show("Error.Could not read file:" + ex.Message);

                }

            }
        }
        private Bitmap Convolution(Bitmap im,double[] mask,int gradient)
        {
            Bitmap sobel = new Bitmap(im.Width, im.Height, PixelFormat.Format8bppIndexed);
            Rectangle r = new Rectangle(0, 0, sobel.Width, sobel.Height);
            BitmapData d = sobel.LockBits(r, ImageLockMode.ReadWrite, sobel.PixelFormat);
            IntPtr ptr = d.Scan0;
            byte[] rgb2 = new byte[d.Stride * sobel.Height];
            int skip = d.Stride - sobel.Width;
            const int maskSize = 3;

            for (int y = 0, counter = 0; y < sobel.Height; ++y, counter += skip)
            {
                for (int x = 0; x < sobel.Width; ++x, counter += 1)
                {
                    if (x > maskSize / 2 && x < (sobel.Width - maskSize / 2) && y > maskSize / 2 && y < (sobel.Height - maskSize / 2))
                    {
                        for(int i = -maskSize / 2; i <= maskSize; ++i)
                        {
                            for(int j = -maskSize / 2; i <= maskSize; ++j)
                            {

                            }
                        }
                    }

                }
            }
            sobel.UnlockBits(d);
            return sobel;
        }
        private void button2_Click(object sender, EventArgs e)
        {
            Rectangle r1 = new Rectangle(0, 0, image1.Width, image1.Height);
            BitmapData d1 = image1.LockBits(r1, ImageLockMode.ReadOnly, image1.PixelFormat);
            IntPtr ptr1 = d1.Scan0;
            byte[] rgb1 = new byte[d1.Stride * image1.Height];
            int skip = d1.Stride - image1.Width;
            System.Runtime.InteropServices.Marshal.Copy(ptr1, rgb1, 0, rgb1.Length);
            image1.UnlockBits(d1);

             
        }
    }
}
